[{"url":"/2025/01/20/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A01%EF%BC%9A%E5%90%84%E7%B1%BB%E6%B3%A8%E5%85%A5%E4%B8%8E%E5%85%B6%E4%BB%96/","content":"title：寒假学习1：各类注入与其他\ndate：2025&#x2F;1&#x2F;20 18:58\n\ncategories：-web知识\n\n数据库基础：库-&gt;表-&gt;列-&gt;行；SQL是用于访问和处理数据库的标准的计算机语言\nSQL注入产生条件：用户控制了SQL语句的一部分，用户的输入不再是一个输入参数，而成为了符合语法的SQL          \n​                                  语句 \n联合查询注入：输入id时不会进行检查，直接用于sql查询时可以在输入id时进行sql语句拼接来入侵\n​                           1.判断是字符型还是数字型：省流–字符型’￥id’，数字型￥id\n​                                                                             1‘ and 1&#x3D;2’失败    1‘ or 1&#x3D;1’成功—-字符型\n​                           2.猜解SQL查询语句中的字段数（数据库自行查询的字段数）：1‘ or 1&#x3D;1 order by 1&#x2F;2&#x2F;3……#-  \n​                                                                                                                                          —#用于注释后方的’\n​                           3.确定显示的字段顺序（数据库查询的字段可能不会显示）：1‘ union select 1，2#\n​                           4.获取当前数据库名：1’ union select 1，database（）#\n​                           5.获取数据库表名：group_concat–用于拼接结果，方便些\n​                                                             information_schema:存放其他数据库信息的数据库\n​                                                             1‘ union select 1，group_concat（table_name）from information_schema.tables where \n​                                                             table_schema&#x3D;database() #\t\n​                            6.获取表中的字段名：1’ union select 1，group_concat(column_name) from information_schema.columns where \n​                                                                   table_name&#x3D;’查询到的结果’\n​                            注：如何让第一行查询删去：1‘ and 1&#x3D;2 union select……—-“union select”前不成立即查询不出来\n​                                    如果group_concat被过滤且只能返回一条数据，则使用limit：……limit 0，1\n​                            7.查询数据：1’ union select group_concat（？，？，……) from ? #     \n报错注入：   利用数据库的某些机制，人为制造错误条件，使查询结果能够出现在错误信息中 \n​                      updatexml（）：updatexml（XML_document,XPath_string,new_value）\n​                                                     XML_document是string格式，为XML文档对象的名称，文中为Doc\n​                                                     XPath_string：Xpath格式的字符串\n​                                                     new_value,String格式，替换查找到的符合条件的数据\n​                      extractvalue（）：extractvalue（XML_documnet，Xpath_string）\n​                      将Xpath_value替换为concat（0x7e，（select user（）&#x2F;database()……）,0x7e)即可在报错中获取数据库信息\n​                       注：SQL中0x（数字）代表一种字符串，如0x7e代表~                    \n布尔盲注：即在SQL注入过程中，SQL语句执行查询后，查询数据不能回显到前端页面中，我们需要使用一些特殊的方式来判断或尝试，这个过程成为盲注\n两大要点：一.字符串的截取\n​                   1.substr（）：substr（str，pos，len）–substr（（select database（）），1,1）\n​                                             substr（str，pos）–截取从pos位置开始到最后的所有str字符串（不常用）\n​                                             注：若逗号被过滤，可这样：substr（（select database（））from 1 for 1）\n​                                                     mid与substr几乎一致，不过mid必须三个参数\n​                    2.right（）：right（str，len）从右边开始截取str的len位\n​                    缺点：一位一位太过麻烦，而且可能碰到奇怪的符号\n​                    3.搭配ascii（）的right（）：ascii（right（str，len））\n​                    巨大优点：转为数字能进行算数运算与比较（可以二分查找），且能避免特殊符号干扰\n​                     注：使用ord同名函数应对ascii过滤\n​                    4.left（）：与right一样，但与ascii无法搭配，运用reverse（用于翻转）解决\n​                                         ：ascii（reverse（left（‘abc’，2）））\n​                    5.trim（）：过滤指定字符串，最常用于移除字首或字尾空白\n​                                           此处可以移除特定字符：trim（leading ‘a’ from ‘abcd’）返回bcd\n​                                           若移除的字符不为字符串首或尾字符，则原字符串原样返回\n​                                           因此用法：trim（leading ？from ‘abcd’）&#x3D;trim（leading ？+1 from ‘abcd’）\n​                                                               trim（leading ？+1from ‘abcd’）&#x3D;trim（leading ？+2 from ‘abcd’）\n​                                                              将结果锁死在？或？+1再进行寻找，之后可以继续下去\n​                                                              trim（leading a？from ‘abcd’）&#x3D;trim（leading a？+1 from ‘abcd’） \n​                    6.regexp：select ？regexp  “^ascav”&#x2F;“asfcav”(^代表匹配除给定字符外的字符，没有……代表匹配给定字符)\n​                                        注：不严格区分大小写，想区分则在select后加binary\n​                    7.between：select a between b and c—-筛选&gt;&#x3D;b并且&lt;&#x3D;c的数据，不存在则返回0\n​                                           select a not between b and c—-筛选&lt;b并且&gt;c的数据，不存在则返回0\n​                    8.in: select a in(b,c,d,e,……)查询括号内有无a\n​                             依然是大小写不敏感，也有not in\n​                    9.异或：^—-where id&#x3D;1‘^（substr（）&#x3D;’a‘）^’1\n​                   二.比较\n​                   1.&#x3D;和&gt;,&lt;不再强调\n​                   2.like：泛泛查询：select database（） like“asfefs%”\n​                                                    用%表示任意字符，如果没用%则like字句与&#x3D;的效果一样\n延时盲注：条件表达式与sleep（）搭配即可\n​                    if（a，b，c）a对返回b，不对返回c\n​                    case a when b then c else d end a与b是否相等，对则返回c，不对则返回d\n​                    sleep（x）：睡眠x秒\n​                    if对则sleep，不对则返回1，查看是否睡眠\n报错盲注：正确就OK，不正确就ERROR，没有其他变化的情况\n​                   if（a，执行某个函数执行过程中会报错，0）—-a即为布尔盲注的基本过程\n​                   几个常用函数：exp（x）—-e的x次方，x足够大时报错\n​                                              cot（0）—-无限，报错\nmd5绕过：￥a！&#x3D;￥b；\n​                  （1）md5（￥a）&#x3D;&#x3D;md5（￥b）\n​                     在php中0e视为科学计数法，因此寻找两个本身不相同，md5加密后开头有0e的字符串（注：0e后不能有字母，否则失效）\n​                     https://blog.csdn.net/qq_38603541/article/details/97108663其中有特定字符串供给使用\n​                  （2）md5（￥a）&#x3D;&#x3D;&#x3D;md5（￥b）\n​                    利用数组来绕过，上传数组会得到null，null&#x3D;&#x3D;&#x3D;null通过验证\n​                    url：？a[]&#x3D;…&amp;a[]&#x3D;…\n​                    (string)￥a!&#x3D;(string)￥b；md5（￥a）&#x3D;&#x3D;&#x3D;md5（￥b）\n变量覆盖：后续代码涉及变量并做了危险的操作\n​                   extract（）：将数组中键名作为变量名，键值作为变量值\n​                   parse_str（）：把查询字符串解析到变量中—-parse_str（“name&#x3D;Bill&amp;age&#x3D;60”）；echo ￥name；echo ￥age；\n命令执行：当应用需要调用一些外部程序去处理内容时，就会用到一些执行系统命令的函数，当用户可以控制命令执行中的参数时，便可\n​                   注入恶意系统命令到正常命令中，造成命令执行攻击。\n​                   r：可读取–4；w：可编辑–2；x：可执行–1\n​                   r权限决定用户是否可以ls，x权限决定用户是否可以cd\n​                   程序过滤不严谨，导致用户可以将代码注入并执行：eval（），assert（），preg_replace（），call——user——func（）\n​                   对于执行命令的函数，参数过滤不严谨，导致直接命令执行：system（），exec（），shell_exec（），passthru（），  \n​                   pctnl_exec（），popen（），proc_open（）\n​                   注：反引号是shell_exec（）的别名\n联合执行（接命令执行）：1.分号：a；b；c—-a成功与否不影响b，c的执行\n​                                              2.&amp;&amp;：a&amp;&amp;b&amp;&amp;c—-前一个命令成功结束时，下一个命令才会运行\n​                                              3.a|b—-前一个命令的结果作为后一个命令的参数\n​                                              4.换行符：%0a，%0d\n绕过过滤（linux）：1.过滤空格：￥IFS  ￥{IFS}  ￥IFS￥9  &lt;  &lt;&gt;  {cat，flag.php}-&gt;用逗号实现空格功能\n​                                    2.过滤关键字：（1）反斜线绕过：ca\\t，fla\\g.php\n​                                                              （2）两个单引号绕过：fla’‘g.php\n​                                                              （3）通配符绕过：fla？.php  fla*.php  fla{a..z}.php  fla[a-z].php\n​                                                              （4）base64编码绕过：echo“avsddvsrgwegsef”|base64 -d| bash\n​                                                              （5）hex编码绕过：“2353463523234235235” | xxd -r -p | bash\n​                                                              （6）内联执行：使用反引号，先执行反引号里的内容，在将输出结果放在外面执行别的语句\n​                                                              （7）变量：a&#x3D;fl；b&#x3D;ag；cat ￥a￥b.php\n代码执行：eval（）函数—-&lt;？php eval（￥_POST[0]）；？&gt;\n无字母数字RCE\n反序列化：序列化是将变量转换为可保存或传输的字符串的过程；实现的函数是serialize（）\n​                   反序列化是将这个字符串再转化成原来的变量使用，就是序列化的逆过程，实现函数是unserialize（）\n​                   序列化数据格式：O：长度：class 名字：元素个数：{元素1；值1；元素2；值2}\n​                                                  对于元素：字符串—-s：length：value；\n​                                                                     整数—-i：value；\n​                                                                     布尔—-b：value；\n​                                                                     空值—-N；\n​                                                                     浮点数：d；value；\n​                   反序列化漏洞：也叫对象注入，当程序在进行反序列化时，会自动调用一些函数，但是如果传入函数的参数可以被用户控制的      \n​                                              话，用户可以输入一些恶意代码到函数中，从而导致漏洞\n"},{"title":"ctfshow web 入门1-20详解","url":"/2024/11/23/ctfshow-web-rumen/","content":"categories:  - web题解\n\n​                                    竟然还要花钱，只能从网上找具体解析了（希望能把知识点掌握了吧）\n第一题​                 使用F12快捷键对网站进行审计，可以在元素板块内的中找到flag\n​                 \n知识点：（1）注意到flag左右添加了&lt;!–       &gt;,这在HTML中是一种用于注释语句的标签，可以让其中内容无法在浏览器中显示。\n​                （2）F12是绝大多数浏览器自带的快捷功能，用于审计\n\n第二题​                想像上一题一样用F12解决问题（想也没用毕竟没钱买题），会发现无法打开，也无法使用右键选择”查看主页源代码“选项，\n​                那就必须换一种方式查看。\n​                 \n​                 sir, this way.\n​                 或者通过在URL的前面加上view-source:，就可以显示出网页源代码了。\n知识点：(1)通过网页源代码我们可能会发现有禁用鼠标右键等功能的语句，要学会灵活使用其他方法。\n​               (2)view-source是一种在网页使用的功能，它允许用户查看当前网页源代码（可以被禁用），具体做法为view-source:URL\n\n第三题​                尝试前两题所有方法后并未发现flag，这时就要换一个思路，搜集的信息应不止一种。\n​                请求包与响应包的概念已学过，此时应该看看里面有没有猫腻，使用浏览器自带的工具即可。\n​               \n​               点开网络界面刷新即可看到请求包与响应包\n知识点：有关请求包的内容：1.请求行：方法字段 URL字段 协议版本\n​                                                   2.请求体：Accept-Charset：浏览器可以接受的字符编码（如UTF-8）\n​                                                                      Accept-Encoding：指定浏览器可以支持的web服务器返回内容压缩编码方式。编码方式不同于                        \n​                                                                      文件格式，它是为了压缩文件并加速文件传递速度。浏览器在接收到Web响应之后先解码，然 \n​                                                                      后再检查文件格式。\n​                                                                      Accept-Language：指出浏览器可以接受的语言种类，如en或en-us，指英语。\n​                                                                      Authorization：HTTP授权的授权证书。\n​                                                                      Referer：表明产生请求的网页URL。如比从网页A中点击一个链接到网 \n​                                                                      页B，在向服务器发送的GET&#x2F;B中的请求中，Referer是web名称+端口号+A，这个属性可以用来\n​                                                                      跟踪Web请求是从什么网站来的。\n​                                                                      X-Forwarded-For：X-Forwarded-For头用于指示请求的真实客户端IP地址\n​                                                                      Cache-Control：指定请求和响应遵循的缓存机制\n​                                                                      Connection：表示是否需要持久连接。（HTTP 1.1默认进行持久连接）\n​                                                                      Cookie：HTTP请求发送时，会把保存在该请求域名下的所有cookie值一起发送给web服务器。 \n​                                                                      cookie其实就是一些数据信息，类型为“小型文本文件”，存储于电脑上的文本文件中。\n​                                                                      Content-Length：请求的内容长度\n​                                                                      Content-Type：请求的内容类型\n​                                                                      User-Agent：是客户浏览器名称\n​                                                                      Host：对应网址URL中的Web名称和端口号。\n\n第四题​               根据提示可知和robots.txt有关，直接在链接上加入并回车即可，再将得到的结果放入链接后\n知识点：obots.txt是一个纯文本文件，是网站管理者写给爬虫的一封信，里面描述了网站管理者不希望爬虫做的事，比如：\n​               不要访问某个文件、文件夹\n​               禁止某些爬虫的访问\n​               限制爬虫访问网站的频率\n​               一个自觉且善意的爬虫，应该在抓取网页之前，先阅读robots.txt，了解并执行网站管理者制定的爬虫规则。\n​               这是一个来自必应的robots.txt\n​               \n​                User-agent: 爬虫的名称(若名称为*则对象是所有爬虫)\n​                Disallow: 不允许爬虫访问的地址（名称为&#x2F;代表什么都不准访问）\n​                Allow: 允许爬虫访问的地址\n​                若没有robots.txt代表可随便访问\n\n第五题​                根据提示可知本题考查phps泄露\n​                直接在链接后输入&#x2F;index.phps即可      \n知识点：phps文件就是php的源代码文件，通常用于提供给用户（访问者）直接通过Web浏览器查看php代码的内容。\n​               数据包中可能会有以下内容\n​                \n​                通过X-Powered-By可知网站用什么语言编写（不用php的话自然不存在phps泄露）\n​                Server响应头字段指示服务器所使用的Web服务器软件的名称和版本号还有所处系统\n\n第六题​               提示说明源码包在当前目录，使用特定文件名加后缀输入即可，这里需要的是www.zip\n​               随后下载了文件\n​               \n​               在网页URL后输入文件即可得到答案  \n知识点：(1)为什么可能不能直接使用双击txt后得到的内容，因为源码包有此文件代表服务器也有此文件，其内容可被修改，因此如果错  \n​                    误则需直接前往访问该文件\n​                (2) 当开发人员在线上环境中对源代码进行了备份操作，并且将备份文件放在了 web 目录下，就会引起网站源码泄露。    \n​                     常见的网站源码备份文件后缀：tar tar.gz zip rar\n​                     常见的网站源码备份文件名：web website backup back www wwwroot temp\n\n第七题与第八题​                               根据提示说明跟能进行版本控制的系统有关文件泄露有关，一种是git，另一种是svn\n​                               直接在URL后输入&#x2F;.git和&#x2F;.svn即可\n​                            \n​                                         \n知识点：(1)Git和SVN是两种流行的版本控制系统，它们在功能和设计哲学上有着显著的差异。SVN，或Subversion，是一个集中式的版 \n​                    本控制系统，它将所有的数据存储在一个中央服务器上。Git则是一个分布式的版本控制系统，每个开发者都有一个完整的代\n​                    码库副本。\n​               (2)在Linux中，以点（.）开头的文件或文件夹是隐藏文件或隐藏文件夹，可能会被不小心部署到网站上。开发人员使用git与svn\n​                    事可能会自动部署，导致其泄露。\n\n第九题\n\n​                vim泄露，访问&#x2F;index.php.swp，下载文件后打开得到答案\n知识点：(1)当开发人员在线上环境中使用 vim 编辑器，在使用过程中会留下 vim 编辑器缓存，当vim异常退出时，缓存会一直留在服务\n​                    器上，引起网站源码泄露。(正常关闭vim的话缓存文件会被清除)\n​               (2)第一次产生的交换文件名为 .index.php.swp\n​                   再次意外退出后，将会产生名为 .index.php.swo 的交换文件\n​                   第三次产生的交换文件则为 .index.php.swn\n\n第十题​                cookie 只是一块饼干，不能存放任何隐私数据\n​               包不是饼干的呀老弟\n​               直接用F12在网络中的数据包中找到Cookie发现答案\n​                \n​               有个小坑，%7B是什么东西？在URL中代表{，可以通过HackBar自带的URL解码功能转换\n​               \n知识点：(1)cookie其实就是一些数据信息，类型为“小型文本文件“，是某些网站为了辨别用户身份，进行Session跟踪而储存在用户本地\n​                    终端上的数据（通常经过加密），由用户客户端计算机暂时或永久保存的信息。浏览器保存了我们的cookie，里面记录了一些\n​                    信息，这些cookie是服务器创建后返回给浏览器的，浏览器只进行了保存。\n​                (2) 有些符号在URL中是不能直接传递的，如果要在URL中传递这些特殊符号，那么就要使用他们的编码了。URL编码的原则就是\n​                      使用安全的字符（没有特殊用途或者特殊意义的可打印字符）去表示那些不安全的字符。编码的格式为：%加字符的ASCII    \n​                      码，即一个百分号%，后面跟对应字符的ASCII（16进制）码值。如果不使用转义字符，这些编码就会当URL中定义的特殊字                \n​                      符处理。\n\n第十一题​             域名其实也可以隐藏信息，比如ctfshow.com 就隐藏了一条信息。可以通过Dns查询网站查询内容\n​                   \n知识点：域名解析，简而言之，就是将域名转换为IP地址的过程。当我们访问一个网站时，实际上我们是在与一个IP地址通信，但由于IP\n​               地址通常是一串难以记忆的数字，例如“192.0.2.1”，所以我们使用更为直观的域名作为代替。\n​               域名解析类型\n​               1.A记录（Address Record）：A记录用于将域名指向一个具体的IP地址。当你想要人们通过你的域名来访问你的网站时，你需要\n​               设置A记录。A记录是网站建设中最主要的一种类型。\n​               2.MX记录（Mail Exchange Record）：当你有自己的域名，并希望使用它来收发电子邮件时，你需要设置MX记录来告诉互联网\n​               你的邮件服务器在哪里。\n​               3.CNAME记录（Canonical Name Record）：CNAME用于给域名设置别名。\n​               4.SPF记录（Sender Policy Framework）：SPF记录用于防止电子邮件欺诈。它确定哪些邮件服务器被授权为你的域名发送电子\n​               邮件，从而避免垃圾邮件发送者冒充你发送电子邮件。\n​               5.TXT记录（Text Record）：TXT记录主要用于存放文本信息。这可以是服务器相关的各种信息，如域名所有权验证、电子邮件\n​               相关的策略等。 \n\n第十二题​                   有时候网站上的公开信息，就是管理员常用密码\n​                   网址后面加&#x2F;admin进入管理员登录界面，通过提示在网站翻找可能的密码，发现可疑数字。\n​                   \n​                   用户名尝试最简单的名字，如admin\n​                   登录成功获得flag\n知识点：不要老想着通过什么cookie获得隐藏信息，可能平平无奇的界面就有\n\n第十三题​                   技术文档里面不要出现敏感信息，部署到生产环境后及时修改默认密码\n​                   \n​                      发现document可以访问，得到敏感信息\n\n​                       直接访问当然是无效的！your-domain当然指的是题目网站域名。\n​                       所以将&#x2F;system110&#x2F;login.php输入至网址后即可进入登录界面，输入用户名与密码即可。\n知识点：只要符合网站格式就能当做链接点击，但若未与ip地址匹配则无法进入\n\n第十四题​                   有时候源码里面就能不经意间泄露重要(editor)的信息,默认配置害死人\n​                   根据提示查找源码中的editor\n​                    \n​                   尝试访问&#x2F;editor（成功）,&#x2F;editor&#x2F;upload&#x2F;（失败）,&#x2F;editor&#x2F;upload&#x2F;banner-app.png（成功），从而知道editor是突破口\n​                   网上查询得知editor是编辑器，进入后可打开文件目录进行查找\n​                   对服务器目录进行遍历,前往&#x2F;var&#x2F;www&#x2F;html 找到网页的文件目录，发现nothinghere（笑）\n​                   \n​                   将对应路径输入至网址后面即可得到答案\n知识点：(1)URL&#x2F;index.php 在服务器中的路径就是&#x2F;editor&#x2F;attached&#x2F;flash&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php，因此访问\n​                    URL&#x2F;nothinghere&#x2F;fl000g.txt（前面均为文件路径）\n\n第十五题​                   公开的信息比如邮箱，可能造成信息泄露，产生严重后果\n​                   再次加上&#x2F;admin进入登录界面访问后台，发现需要账号密码\n​                   \n​                    自然不知道密码是什么，选择忘记密码\n​                     \n​                    邮箱派上用场\n​                    \n​                    查找qq号发现在西安，输入后发现成功，获得新密码，登录得到答案\n知识点：于十二题类似，在界面的公开信息中寻找有用信息\n\n第十六题​                   对于测试用的探针，使用完毕后要及时删除，可能会造成信息泄露\n​                   本题考查php探针，加入&#x2F;tz.php 即可查看探针\n​                   \n​                   找到此处即可跳转php详细内容\n​                   \n​                       向下翻找即可找到flag\n知识点：(1)php探针是用来探测空间、服务器运行状况和PHP信息用的，探针可以实时查看服务器硬盘资源、内存占用、网卡流量、系统负载、服务器时间等信息。可以用类似域名&#x2F;tz.php 这类网址访问雅黑探针\n\n第十七题​                 备份的sql文件会泄露敏感信息\n​                   \n​                     \n​    与数据库有关，访问数据库备份文件即可：URL&#x2F;backup.sql\n知识点：(1)在web服务中，尝尝不局限于网站的源代码泄露，网站的数据库备份文件等原则不允许访问的文件可被通过访问web路径进行 \n​                    下载得到\n\n第十八题​                   这种小游戏还得查看源码获得有效信息\n​                   \n​                   \n​                       进入js文件查看\n​                       \n​                      将这一串数据解码即可得到提示信息110.php\n​                      URL&#x2F;110.php即可得到答案\n知识点：类似小游戏一定要通过源码查找可能的通关条件与能得到的有效信息\n\n第十九题​                    密钥什么的，就不要放在前端了\n​                   \n​                    通过源码可知，在前端输入账号密码，将密码根据某种规则加密后与设置好的数码匹配并且账号匹配时，给出flag\n​                    所以我们可以1：直接POST传参就可以绕过前端加密直接与数码匹配\n​                    \n​                                            2：通过源码中给出的加密方式解码数码再将密码输入至前端\n知识点：需要登录时可查看源码寻找可能的账号密码与判定登陆成功的条件\n\n第二十题​                    mdb文件是早期asp+access构架的数据库文件，文件泄露相当于数据库被脱裤了\n​                    URL&#x2F;db&#x2F;db.mdb得到文件，打开进行翻找即可得到flag\n知识点：早期asp+access具有漏洞，一旦被扫描到目录下的存在mdb文件，攻击者可以直接访问地址进行下载获取数据库信息。\n​                                            \n​                         \n​               \n​            \n"},{"title":"php的学习（重点）","url":"/2024/12/08/php%E7%9A%84%E5%AD%A6%E4%B9%A0%EF%BC%88%E9%87%8D%E7%82%B9%EF%BC%89/","content":"categories:  - web知识\n\n（水痘导致重度感冒，第二周基本没学多少）\n注：本文中的￥即为$\n1.echo和print的区别：echo能够输出一个及以上的字符串，英文逗号隔开                              print只能输出一个字符串，并始终返回1：print “avcd”                                                                                          echo print “avcd”输出avcd1\n2.双引号之间可以引用变量，单引号不行\n3.var_dump(变量）：如果变量是一个八进制或十六进制数，输出的仍是十进制；输出指数e5或e-5及以上不显示结果\n4.可以设置变量值为null来清空变量数据，不要把null用引号引起来\n5.print（’'）可以格式化输出内容\n6.echo '引用一段html，中间想插入一个php变量怎么办'  ：‘.变量.’即可输出变量的值或者使用EOF\n7."}]